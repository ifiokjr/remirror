{
  "title": "Creating the BaseKeymapExtension",
  "steps": [
    {
      "file": "%40remirror/extension-base-keymap/src/base-keymap-extension.ts",
      "line": 108,
      "description": "Here the `BaseKeymapExtension` class is declared extending the `PlainExtension` with both settings and properties. \n\nExtensions can define both settings and properties. \n\nSettings are static and can't be changed during the lifecycle of the application. Settings generally apply to items that directly affect the schema, such as supported content. Changing this dynamically can cause things to break. \n\nProperties are dynamic and can be changed by the user during runtime. Typically all callbacks should be registered as properties and settings that the end user may want to tweak while using the editor can also be changed here."
    },
    {
      "file": "%40remirror/extension-base-keymap/src/base-keymap-extension.ts",
      "line": 109,
      "description": "When settings are defined for an extension class it needs to set some `defaultOptions` as a static property. This means they can be accessed via the constructor at runtime.\n\nUnfortunately it's very hard for typescript to enforce settings for static properties, but the value of static properties is that they can be accessed by other parts of the codebase. \n\nThis means settings can be shared easily between `Preset`'s and `Extension`'s. Eventually an `eslint` rule will be added to automatically warn when the required settings or properties are missing  and fill in the template for you."
    },
    {
      "file": "%40remirror/extension-base-keymap/src/base-keymap-extension.ts",
      "line": 125,
      "description": "Extension's make heavy use of creator methods. The `createKeymap` method allows an extension to register the keybinding for the editor."
    }
  ],
  "ref": "next"
}
