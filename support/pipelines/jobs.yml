parameters:
  name: '' # defaults for any parameters that aren't specified
  vmImage: ''

jobs:
  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}Checks
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: yarn integrity
            displayName: 'Check yarn lock file is up to date'
          - bash: yarn ci:audit
            displayName: 'Check for security audit flags in dependencies'
          - bash: yarn lint
            displayName: 'Check all lint rules'
          - bash: yarn typecheck
            displayName: 'Typecheck code and tests'
          - bash: yarn dtslint
            displayName: 'Run dtslint'

  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}UnitTests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: |
              yarn test
            displayName: 'Run unit tests across project'

  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}SizeChecks
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: yarn build
            displayName: 'Build project'
          - bash: yarn size
            displayName: 'Check size limits'

  - ${{ if eq(parameters.name, 'macOS') }}:
      - job: ${{ parameters.name }}ChromeIntegrationTests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - checkout: self
            lfs: true
          - ${{ if eq(parameters.name, 'Linux') }}:
              - bash: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
                displayName: 'Increase file watch limit for Linux only'
          - template: yarn-install.yml

          - bash: yarn build
            displayName: 'Build project'

          - bash: yarn test:e2e
            displayName: 'NextJS integration tests'
            env:
              REMIRROR_E2E_SERVER: 'next'

          - bash: yarn test:e2e
            displayName: 'Razzle integration tests'
            env:
              REMIRROR_E2E_SERVER: razzle
              REMIRROR_E2E_BASIC: 'true'

          - bash: yarn test:e2e
            displayName: 'Storybook integration tests'
            env:
              REMIRROR_E2E_SERVER: storybook
              EMIRROR_E2E_BASIC: 'true'

          - publish: $(System.DefaultWorkingDirectory)/e2e/__image_snapshots__
            condition: failed()
            artifact: ImageSnapshots

  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}PublishCIBuildToNpm
        dependsOn:
          - ${{ parameters.name }}Checks
          - ${{ parameters.name }}UnitTests
          - ${{ parameters.name }}SizeChecks
          - macOSChromeIntegrationTests
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/canary')) # Only run on canary
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: yarn build
            displayName: 'Build project'
          - task: npmAuthenticate@0
            inputs:
              workingFile: '.npmrc'
              customEndpoint: 'NPM Registry Publish Token'
          - bash: yarn lerna:publish:ci
            displayName: Publish canary build to NPM
